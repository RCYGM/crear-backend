#!/bin/bash

echo "🚀 Iniciando creación de proyecto backend con arquitectura inteligente"

# 1. Nombre del proyecto
read -p "📦 Nombre del proyecto: " project_name
mkdir "$project_name"
cd "$project_name"

# 2. Inicializar Node.js
npm init -y > /dev/null

# 3. Instalaciones base
npm install express dotenv > /dev/null
npm install --save-dev nodemon > /dev/null
npm install prisma @prisma/client pg > /dev/null

# Instalar socket.io si se elige arquitectura con sockets
if [[ "$architecture" == "socket" || "$architecture" == "both" ]]; then
    echo "📦 Instalando Socket.IO..."
    npm install socket.io > /dev/null
fi


# 4. ¿HTTP, Socket.IO o ambos?
echo "⚙️ ¿Qué arquitectura quieres usar?"
select arch in "HTTP (REST)" "Socket.IO" "Ambos"; do
    case $arch in
        "HTTP (REST)")
            architecture="http"
            break
            ;;
        "Socket.IO")
            architecture="socket"
            break
            ;;
        "Ambos")
            architecture="both"
            break
            ;;
    esac
done

mkdir src

# 4. Crear .gitignore profesional
echo "📄 Creando archivo .gitignore..."

cat <<EOL > .gitignore
# Created by https://www.toptal.com/developers/gitignore/api/node
# Edit at https://www.toptal.com/developers/gitignore?templates=node

### Node ###
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

### Node Patch ###
# Serverless Webpack directories
.webpack/

# Optional stylelint cache

# SvelteKit build / generate output
.svelte-kit

# End of https://www.toptal.com/developers/gitignore/api/node
EOL

# 5. Carpetas por defecto según arquitectura
http_folders=("src/controllers" "src/routes" "src/middlewares" "src/services" "src/models")
socket_folders=("src/sockets" "src/listeners")

echo "📁 Creando carpetas por defecto..."

if [[ "$architecture" == "http" || "$architecture" == "both" ]]; then
    for folder in "${http_folders[@]}"; do
        mkdir -p "$folder"
        echo "🧩 $folder"
    done
fi

if [[ "$architecture" == "socket" || "$architecture" == "both" ]]; then
    for folder in "${socket_folders[@]}"; do
        mkdir -p "$folder"
        echo "🔌 $folder"
    done
fi

# 6. Preguntar por más carpetas
read -p "➕ ¿Quieres agregar más carpetas? (separadas por espacio, dentro de src/): " -a extra_folders
for extra in "${extra_folders[@]}"; do
    mkdir -p "src/$extra"
    echo "📁 src/$extra"
done

# 6.1. Configuración base para router (solo si HTTP está presente)
if [[ "$architecture" == "http" || "$architecture" == "both" ]]; then
    # Crear archivo de rutas base
    cat <<EOL > src/routes/index.js
const express = require('express');
const router = express.Router();

// Importar rutas individuales
const ejemploRoutes = require('./ejemplo.routes');
router.use('/ejemplo', ejemploRoutes);

module.exports = router;
EOL

    # Crear una ruta de ejemplo
    cat <<EOL > src/routes/ejemplo.routes.js
const express = require('express');
const router = express.Router();
const ejemploController = require('../controllers/ejemplo.controller');

router.get('/', ejemploController.getMensaje);

module.exports = router;
EOL

    # Crear un controlador de ejemplo
    cat <<EOL > src/controllers/ejemplo.controller.js
exports.getMensaje = (req, res) => {
  res.json({ mensaje: '¡Ruta ejemplo funcionando! 🚀' });
};
EOL
fi

# 7. Crear archivos base
touch server.js
echo "📝 Creado: server.js"

# 8. Configurar server.js según arquitectura
cat <<EOL > server.js
require('dotenv').config();
const express = require('express');
const app = express();
const PORT = process.env.PORT || 3000;

app.use(express.json());
EOL

# 👇 Solo si hay HTTP, importar y usar rutas
if [[ "$architecture" == "http" || "$architecture" == "both" ]]; then
cat <<EOL >> server.js

const rutas = require('./src/routes');
app.use('/api', rutas);
EOL
fi

# 👇 Si hay sockets, configurar servidor y conexión Socket.IO
if [[ "$architecture" == "socket" || "$architecture" == "both" ]]; then
cat <<'EOL' >> server.js

const http = require('http').createServer(app);
const { Server } = require('socket.io');
const io = new Server(http);

io.on('connection', (socket) => {
    console.log('🔌 Cliente conectado a Socket.IO');
    // Aquí puedes importar tus listeners
});
EOL
fi

# 👇 Ruta raíz
cat <<EOL >> server.js

app.get('/', (req, res) => {
    res.send('Servidor funcionando 🚀');
});
EOL

# 👇 Levantar el servidor según el tipo
if [[ "$architecture" == "socket" || "$architecture" == "both" ]]; then
cat <<EOL >> server.js

http.listen(PORT, () => {
    console.log(\`Servidor con Socket.IO corriendo en puerto \${PORT}\`);
});
EOL
else
cat <<EOL >> server.js

app.listen(PORT, () => {
    console.log(\`Servidor HTTP corriendo en puerto \${PORT}\`);
});
EOL
fi

# 9. Variables de entorno
read -p "🔐 ¿Qué variables de entorno quieres definir? (separadas por espacio): " -a env_vars
touch .env .env.example

for var in "${env_vars[@]}"; do
  echo "$var=" >> .env
  echo "$var=" >> .env.example
done

echo "PORT=3000" >> .env
echo "PORT=3000" >> .env.example

# 10. Prisma
npx prisma init > /dev/null

# 11. Scripts de npm
npx json -I -f package.json -e '
this.scripts = {
  "dev": "nodemon server.js",
  "start": "node server.js",
  "prisma": "prisma"
}'

# 12. Mensaje final y abrir VSCode
echo "✅ Proyecto $project_name creado con éxito con arquitectura '$architecture'"
code .

# 13. Preguntar si desea inicializar un repositorio Git
read -p "📦 ¿Quieres inicializar este proyecto como repositorio Git? (s/n): " init_git

if [[ "$init_git" == "s" || "$init_git" == "S" ]]; then
  git init
  git add .
  git commit -m "🚀 Proyecto backend inicializado automáticamente"
  echo "✅ Git inicializado y primer commit realizado."

  # Preguntar si desea conectar con GitHub
  read -p "🌐 ¿Quieres conectar este repositorio a GitHub y hacer push ahora? (s/n): " push_github

  if [[ "$push_github" == "s" || "$push_github" == "S" ]]; then
    read -p "🔗 Pega aquí la URL de tu repositorio GitHub (ej. https://github.com/usuario/repositorio.git): " repo_url
    git remote add origin "$repo_url"
    git branch -M main
    git push -u origin main
    echo "🚀 Proyecto subido exitosamente a GitHub: $repo_url"
  else
    echo "🛑 Proyecto Git creado localmente. Puedes conectar con GitHub más tarde."
  fi
else
  echo "🛑 Git no fue inicializado. Puedes hacerlo manualmente más tarde si lo deseas."
fi
